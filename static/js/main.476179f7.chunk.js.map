{"version":3,"sources":["App.js","actions/TodoActions.js","reducers/TodoReducers.js","store.js","index.js"],"names":["App","useState","todo","setTodo","dispatch","useDispatch","todos","useSelector","state","Todo","className","onSubmit","e","preventDefault","getState","console","log","find","i","type","payload","id","AddTodoAction","onChange","target","value","map","eachTodo","length","fontSize","color","style","paddingLeft","onClick","filter","t","RemoveTodoAction","TodoReducers","action","reducer","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"iPA+DeA,MAtDf,WACE,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAITC,EAFKC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAElCH,MAOR,OACE,qBAAKI,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,kEACA,uBAAMC,SATS,SAACC,GACpBA,EAAEC,iBACFT,EChByB,SAACF,GAAD,OAAU,SAACE,EAAUU,GAEhDC,QAAQC,IAAId,GAEZ,IAAgBI,EAAWQ,IAAnBL,KAAQH,MAEhBS,QAAQC,IAAIV,GAEIA,EAAMW,MAAK,SAACC,GAAD,OAAOA,EAAEhB,OAASA,MAEpB,KAATA,GACdE,EAAS,CACPe,KAAM,WACNC,QAAQ,CAAE,CAAEC,GAAInB,EAAMA,SAAf,mBAA0BI,ODG1BgB,CAAcpB,KAOnB,UACE,uBACEiB,KAAK,OACLT,UAAU,aACVa,SAAU,SAACX,GAAD,OAAOT,EAAQS,EAAEY,OAAOC,UAEpC,wBAAQN,KAAK,SAAST,UAAU,MAAhC,oBAIDJ,GACCA,EAAMoB,KAAI,SAACC,GACT,OAAIA,EAASC,QAAU,EACd,yDAGL,oBAAIlB,UAAU,WAAd,SACE,qBAAsBA,UAAU,aAAhC,UACE,sBAAMmB,SAAS,OAAf,SAAuBF,EAASzB,OAChC,sCAAQ,cAAC,IAAD,CACN4B,MAAM,QACND,SAAS,OACTE,MAAO,CAAEC,YAAa,IACtBC,QAAS,kBAAM7B,EC5BL,SAACF,GAAD,OAAU,SAACE,EAAUU,GAEnDC,QAAQC,IAAI,oCAMZZ,EAAS,CACPe,KAAM,cACNC,QALEN,IADFL,KAAQH,MAMO4B,QAAO,SAACC,GAAD,OAAOA,EAAEd,KAAOnB,EAAKmB,SDkBDe,CAAiBT,YANpCA,EAASN,e,uBElCvBgB,EAAe,WAAoC,IAAnC7B,EAAkC,uDAA1B,CAACF,MAAQ,IAAMgC,EAAW,uCAE3D,OAAOA,EAAOnB,MACV,IAAK,WAGL,IAAK,cACD,MAAO,CAAEb,MAAQgC,EAAOlB,SAE5B,QACA,OAAOZ,ICdfO,QAAQC,IAAIqB,GAEZ,IAAME,EAAUC,0BAAgB,CAC5B/B,KAAO4B,IAGXtB,QAAQC,IAAIuB,GAEZ,IAAME,EAAa,CAACC,KAIdC,EAAQC,sBACNL,EAEAM,8BAAoBC,kBAAe,WAAf,EAAmBL,KAE/C1B,QAAQC,IAAI2B,GAEGA,QCjBfI,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.476179f7.chunk.js","sourcesContent":["import \"./App.css\";\nimport { TiDelete } from \"react-icons/ti\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AddTodoAction, RemoveTodoAction } from \"./actions/TodoActions\";\n\n//useDispatch is use to call the action from our application\n//useSelector is use to access global state to our application\n\nfunction App() {\n  const [todo, setTodo] = useState();\n  const dispatch = useDispatch();\n\n  const Todo = useSelector((state) => state.Todo);\n\n  const { todos } = Todo;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(AddTodoAction(todo));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h2> To-do List (using react-redux) </h2>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"enter-todo\"\n            onChange={(e) => setTodo(e.target.value)}\n          />\n          <button type=\"submit\" className=\"btn\">\n            Add\n          </button>\n        </form>\n        {todos &&\n          todos.map((eachTodo) => {\n            if (eachTodo.length <= 1) {\n              return <span>Cant enter blank todo</span>;\n            } else {\n              return (\n                <ul className=\"allTodos\">\n                  <li key={eachTodo.id} className=\"singleTodo\">\n                    <span fontSize=\"10px\">{eachTodo.todo}</span>\n                    <span>  <TiDelete\n                      color=\"white\"\n                      fontSize=\"20px\"\n                      style={{ paddingLeft: 10 }}\n                      onClick={() => dispatch(RemoveTodoAction(eachTodo))}\n                    />\n                    </span>\n                   \n                  </li>\n                </ul>\n              );\n            }\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","//getState helps us to access our app state\r\n//dispatch is the action which passes two agruments action and payload to the reducer\r\n\r\nexport const AddTodoAction = (todo) => (dispatch, getState) => {\r\n\r\n  console.log(todo) //this todo is coming from App.js which user is typing on input box\r\n    \r\n  const { Todo: { todos }} = getState(); \r\n\r\n  console.log(todos)\r\n\r\n  const hasTodo = todos.find((i) => i.todo === todo); //return booleanr\r\n\r\n  if (!hasTodo && todo !== \"\") {\r\n    dispatch({\r\n      type: \"ADD_TODO\",\r\n      payload: [{ id: todo, todo }, ...todos],\r\n    });\r\n  }\r\n};\r\n\r\nexport const RemoveTodoAction = (todo) => (dispatch, getState) => {\r\n\r\n  console.log(\"remove todo in todoaction folder\")\r\n  const {\r\n    Todo: { todos },\r\n  } = getState();\r\n\r\n\r\n  dispatch({\r\n    type: \"REMOVE_TODO\",\r\n    payload: todos.filter((t) => t.id !== todo.id),\r\n  });\r\n};\r\n","/*\r\n-> Action ka jo parameter hai wo reducer leta hai taaki store ko update kar sake\r\n-> Action ke andar 2 parameter rehta hai\r\nconst exampleAction = {\r\n    type : \"ADD_TODO\", --> helps to judge which switch case i.e action needs to be execute\r\n    payload : \"Learn redux\" --> passes data to update the store (optional)\r\n}\r\n*/\r\n\r\nexport const TodoReducers = (state = {todos : [] }, action) => {\r\n\r\n    switch(action.type){\r\n        case \"ADD_TODO\" :\r\n            return { todos : action.payload}\r\n\r\n        case \"REMOVE_TODO\":\r\n            return { todos : action.payload}\r\n\r\n        default :\r\n        return state\r\n    }\r\n} ","import { createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { TodoReducers } from './reducers/TodoReducers';\r\n\r\nconsole.log(TodoReducers)\r\n\r\nconst reducer = combineReducers({\r\n    Todo : TodoReducers\r\n})\r\n\r\nconsole.log(reducer)\r\n\r\nconst middleware = [thunk]\r\n\r\n// const initialState = {}\r\n\r\nconst store = createStore(\r\n        reducer,\r\n        \r\n        composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nconsole.log(store)\r\n\r\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}